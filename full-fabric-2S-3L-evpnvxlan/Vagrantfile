# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

## Generate a unique ID for this project
UUID = "EVPNVXLANFabric"

## Define port mapping to build the Fabric
spine_port_map = {  1 => [1,3,5,7],
                    2 => [2,4,6,8] }

leaf_port_map  = {  1 => [1,2],
                    2 => [3,4],
                    3 => [5,6],
                    4 => [7,8]}

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    config.ssh.insert_key = false

    ##########################
    ## Spine           #######
    ##########################
    (1..2).each do |id|
        re_name  = ( "spine" + id.to_s ).to_sym
        pfe_name = ( "spine" + id.to_s + "-pfe" ).to_sym

        ##############################
        ## Packet Forwarding Engine ##
        ##############################
        config.vm.define pfe_name do |vqfxpfe|
            vqfxpfe.ssh.insert_key = false
            vqfxpfe.vm.box = 'juniper/vqfx10k-pfe'
            vqfxpfe.vm.boot_timeout = 600

            # DO NOT REMOVE / NO VMtools installed
            vqfxpfe.vm.synced_folder '.', 
                '/vagrant', disabled: true

            # Internal em1 port to RE
            vqfxpfe.vm.network 'private_network', 
                auto_config: false, 
                nic_type: '82540EM', 
                virtualbox__intnet: "#{UUID}_spine#{id}_internal"

            # In case you have limited resources, you can limit the CPU used per vqfx-pfe VM, usually 50% is good
            #vqfxpfe.vm.provider "virtualbox" do |v|
            #   v.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
            #end
        end

        ##########################
        ## Routing Engine  #######
        ##########################
        config.vm.define re_name do |vqfx|
            vqfx.vm.hostname = "spine#{id}"
            vqfx.vm.box = 'juniper/vqfx10k-re'
            vqfx.vm.boot_timeout = 600

            # DO NOT REMOVE / NO VMtools installed
            vqfx.vm.synced_folder '.', '/vagrant', disabled: true

            # Internal em1 port to PFE
            vqfx.vm.network 'private_network',
                auto_config: false,
                nic_type: '82540EM',
                virtualbox__intnet: "#{UUID}_spine#{id}_internal"
            
            # Unused em2 port
            vqfx.vm.network 'private_network',
                auto_config: false,
                nic_type: '82540EM',
                virtualbox__intnet: "#{UUID}_reserved-bridge"

            # em3 - em6 (xe-0/0/0 - xe-0/0/3)
            (0..3).each do |seg_id|
                vqfx.vm.network 'private_network',
                    auto_config: false,
                    nic_type: '82540EM',
                    virtualbox__intnet: "#{UUID}_seg#{spine_port_map[id][seg_id]}"
            end
        end
    end

    ##########################
    ## Leaf           #######
    ##########################
    (1..3).each do |id|
        re_name  = ( "leaf" + id.to_s ).to_sym
        pfe_name = ( "leaf" + id.to_s + "-pfe" ).to_sym
        
        ##############################
        ## Packet Forwarding Engine ##
        ##############################
        config.vm.define pfe_name do |vqfxpfe|
            vqfxpfe.ssh.insert_key = false
            vqfxpfe.vm.box = 'juniper/vqfx10k-pfe'
            vqfxpfe.vm.boot_timeout = 600

            # DO NOT REMOVE / NO VMtools installed ttt
            vqfxpfe.vm.synced_folder '.', 
                '/vagrant', disabled: true

            # Internal em1 port to RE
            vqfxpfe.vm.network 'private_network', 
                auto_config: false, 
                nic_type: '82540EM', 
                virtualbox__intnet: "#{UUID}_leaf#{id}_internal"

            # In case you have limited resources, you can limit the CPU used per vqfx-pfe VM, usually 50% is good
            #vqfxpfe.vm.provider "virtualbox" do |v|
            #   v.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
            #end
        end

        ##########################
        ## Routing Engine  #######
        ##########################
        config.vm.define re_name do |vqfx|
            vqfx.vm.hostname = "leaf#{id}"
            vqfx.vm.box = 'juniper/vqfx10k-re'
            vqfx.vm.boot_timeout = 600

            # DO NOT REMOVE / NO VMtools installed
            vqfx.vm.synced_folder '.', '/vagrant', disabled: true

            # Internal em1 port to PFE
            vqfx.vm.network 'private_network',
                auto_config: false, 
                nic_type: '82540EM', 
                virtualbox__intnet: "#{UUID}_leaf#{id}_internal"
            
            # Unused em2 port
            vqfx.vm.network 'private_network', 
                auto_config: false, 
                nic_type: '82540EM', 
                virtualbox__intnet: "#{UUID}_reserved-bridge"
            
            # em3 - em4 (xe-0/0/0 - xe-0/0/1)
            (0..1).each do |seg_id|
                vqfx.vm.network 'private_network', 
                    auto_config: false, 
                    nic_type: '82540EM', 
                    virtualbox__intnet: "#{UUID}_seg#{leaf_port_map[id][seg_id]}"
            end

            # em5 - em6 (xe-0/0/2 - xe-0/0/3) facing server
            (1..2).each do |client_id|
                vqfx.vm.network 'private_network', 
                    auto_config: false, 
                    nic_type: '82540EM', 
                    virtualbox__intnet: "#{UUID}_leaf_#{id}_client_#{client_id}"
            end
        end
    end

    ###########################
    ## Servers srv1 and srv2 ##
    ###########################
    (1..2).each do |id|
        srv_name  = ( "srv" + id.to_s ).to_sym
        config.vm.define srv_name do |srv|
            srv.vm.box = "centos/7"
            srv.vm.hostname = "srv#{id}"
            (1..2).each do |leaf_id|
                srv.vm.network 'private_network',
                    nic_type: '82540EM', 
                    virtualbox__intnet: "#{UUID}_leaf_#{leaf_id}_client_#{id}",
                    auto_config: false
            end
            srv.ssh.insert_key = true
            # Enable promiscuous mode
            srv.vm.provider "virtualbox" do |virtualbox|
                virtualbox.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
                virtualbox.customize ["modifyvm", :id, "--nicpromisc3", "allow-all"]
            end
            # Configure interfaces and route
            $script = <<-SCRIPT
            sudo su
            yum install -y teamd
            yum install -y tcpdump
            sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
            sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=0
            echo 'DEVICE=team0' >> /etc/sysconfig/network-scripts/ifcfg-team0
            echo 'DEVICETYPE=Team' >> /etc/sysconfig/network-scripts/ifcfg-team0
            echo 'ONBOOT=yes' >> /etc/sysconfig/network-scripts/ifcfg-team0
            echo 'BOOTPROTO=none' >> /etc/sysconfig/network-scripts/ifcfg-team0
            echo 'IPADDR=192.168.#{id}.#{id}' >> /etc/sysconfig/network-scripts/ifcfg-team0
            echo 'PREFIX=24' >> /etc/sysconfig/network-scripts/ifcfg-team0
            echo 'TEAM_CONFIG='"'"'{"runner": {"name": "lacp", "active": true, "fast_rate": true, "tx_hash": ["eth", "ipv4"]}, "link_watch": {"name": "ethtool"}, "ports": {"eth1": {}, "eth2": {}}}'"'" >> /etc/sysconfig/network-scripts/ifcfg-team0
            echo 'DEVICE=eth1' >> /etc/sysconfig/network-scripts/ifcfg-eth1
            echo 'ONBOOT=yes' >> /etc/sysconfig/network-scripts/ifcfg-eth1
            echo 'DEVICETYPE=TeamPort' >> /etc/sysconfig/network-scripts/ifcfg-eth1
            echo 'USERCTL=no' >> /etc/sysconfig/network-scripts/ifcfg-eth1
            echo 'TEAM_MASTER=team0' >> /etc/sysconfig/network-scripts/ifcfg-eth1
            echo 'TEAM_PORT_CONFIG='"'"'{"prio": 100, "link_watch": {"name": "ethtool"}}'"'" >> /etc/sysconfig/network-scripts/ifcfg-eth1
            echo 'DEVICE=eth2' >> /etc/sysconfig/network-scripts/ifcfg-eth2
            echo 'ONBOOT=yes' >> /etc/sysconfig/network-scripts/ifcfg-eth2
            echo 'DEVICETYPE=TeamPort' >> /etc/sysconfig/network-scripts/ifcfg-eth2
            echo 'USERCTL=no' >> /etc/sysconfig/network-scripts/ifcfg-eth2
            echo 'TEAM_MASTER=team0' >> /etc/sysconfig/network-scripts/ifcfg-eth2
            echo 'TEAM_PORT_CONFIG='"'"'{"prio": 100, "link_watch": {"name": "ethtool"}}'"'" >> /etc/sysconfig/network-scripts/ifcfg-eth2
            echo '192.168.0.0/16 via 192.168.#{id}.254 dev team0' >> /etc/sysconfig/network-scripts/route-team0
            reboot
            SCRIPT
            srv.vm.provision "shell", inline: $script
        end
    end

    ###########################
    ## Servers srv3 and srv4 ##
    ###########################
    (3..4).each do |id|
        srv_name  = ( "srv" + id.to_s ).to_sym
        config.vm.define srv_name do |srv|
            srv.vm.box = "centos/7"
            srv.vm.hostname = "srv#{id}"
            srv.vm.network 'private_network',
                nic_type: '82540EM', 
                virtualbox__intnet: "#{UUID}_leaf_3_client_#{id-2}",
                ip: "192.168.#{id-2}.#{id}"
            srv.ssh.insert_key = true
            # Enable promiscuous mode
            srv.vm.provider "virtualbox" do |virtualbox|
                virtualbox.customize ["modifyvm", :id, "--nicpromisc2", "allow-all"]
            end
            # Configure route
            $script = <<-SCRIPT
            sudo su
            sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config
            sysctl -w net.ipv4.icmp_echo_ignore_broadcasts=0
            echo '192.168.0.0/16 via 192.168.#{id-2}.254 dev eth1' >> /etc/sysconfig/network-scripts/route-eth1
            reboot
            SCRIPT
            srv.vm.provision "shell", inline: $script
        end
    end

    #############################
    # Box provisioning    #######
    #############################
    if !Vagrant::Util::Platform.windows?
        config.vm.provision "ansible" do |ansible|
            ansible.compatibility_mode = "2.0"
            ansible.config_file = "ansible.cfg"
            ansible.extra_vars = {
                ansible_python_interpreter: "/usr/bin/python3"
            }
            ansible.groups = {
                "vqfx10k"      => ["spine1", "spine2", "leaf1", "leaf2", "leaf3" ],
                "spine"        => ["spine1", "spine2"],
                "leaf"         => ["leaf1", "leaf2", "leaf3" ],
                "server"       => ["srv1", "srv2", "srv3", "srv4" ],
                "all:children" => ["vqfx10k", "server" ]
            }
            ansible.playbook = "pb.conf.all.commit.yaml"
        end
    end
end
